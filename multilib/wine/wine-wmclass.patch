From e2a85a4739ef5d29a27d8e0aa8d7b9d0a20013b7 Mon Sep 17 00:00:00 2001
From: Stelios Tsampas <loathingkernel@gmail.com>
Date: Sat, 25 May 2024 15:38:24 +0300
Subject: [PATCH 1/2] winex11.drv: allow custom window wmclass to set through
 the environment

Wine's wmclass can be controlled through the WINE_WMCLASS environment
variable.
---
 dlls/winex11.drv/window.c | 13 +++++++++++--
 1 file changed, 11 insertions(+), 2 deletions(-)

diff --git a/dlls/winex11.drv/window.c b/dlls/winex11.drv/window.c
index 47261734119..5478dd811a9 100644
--- a/dlls/winex11.drv/window.c
+++ b/dlls/winex11.drv/window.c
@@ -1031,8 +1031,17 @@ static void set_initial_wm_hints( Display *display, Window window )
     /* class hints */
     if ((class_hints = XAllocClassHint()))
     {
-        class_hints->res_name = process_name;
-        class_hints->res_class = process_name;
+        const char *wine_wmclass = getenv("WINE_WMCLASS");
+        char window_class[128];
+
+        if (wine_wmclass && *wine_wmclass){
+            snprintf(window_class, sizeof(window_class), "%s", wine_wmclass);
+            class_hints->res_name = window_class;
+            class_hints->res_class = window_class;
+        } else {
+            class_hints->res_name = process_name;
+            class_hints->res_class = process_name;
+        }
         XSetClassHint( display, window, class_hints );
         XFree( class_hints );
     }
-- 
2.49.0


From 984e7fb22f8b373f75f65058134d5c7f3c67bc6a Mon Sep 17 00:00:00 2001
From: Zebra2711 <zebra2711@users.noreply.github.com>
Date: Mon, 28 Apr 2025 16:21:24 +0300
Subject: [PATCH 2/2] winewayland.drv: also use WINE_WMCLASS environment
 variable under Wayland

---
 dlls/winewayland.drv/wayland_surface.c | 12 ++++++++++--
 1 file changed, 10 insertions(+), 2 deletions(-)

diff --git a/dlls/winewayland.drv/wayland_surface.c b/dlls/winewayland.drv/wayland_surface.c
index 8d6b73a61a9..0155b419f59 100644
--- a/dlls/winewayland.drv/wayland_surface.c
+++ b/dlls/winewayland.drv/wayland_surface.c
@@ -255,8 +255,16 @@ void wayland_surface_make_toplevel(struct wayland_surface *surface)
     if (!surface->xdg_toplevel) goto err;
     xdg_toplevel_add_listener(surface->xdg_toplevel, &xdg_toplevel_listener, surface->hwnd);
 
-    if (process_name)
-        xdg_toplevel_set_app_id(surface->xdg_toplevel, process_name);
+    const char *wine_wmclass = getenv("WINE_WMCLASS");
+    char window_class[128];
+
+    if (wine_wmclass && *wine_wmclass) {
+        snprintf(window_class, sizeof(window_class), "%s", wine_wmclass);
+        xdg_toplevel_set_app_id(surface->xdg_toplevel, window_class);
+    } else {
+        if (process_name)
+            xdg_toplevel_set_app_id(surface->xdg_toplevel, process_name);
+    }
 
     wl_surface_commit(surface->wl_surface);
     wl_display_flush(process_wayland.wl_display);
-- 
2.49.0

