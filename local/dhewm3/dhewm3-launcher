#!/usr/bin/python
# -*- coding: utf-8 -*-

import configparser
import os
import sys

from PySide6.QtCore import Qt, QProcess, QProcessEnvironment, QStandardPaths
from PySide6.QtWidgets import QApplication, QFileDialog, QMessageBox
from xdg import BaseDirectory

exe_name = "dhewm3"
doom_dir = "/usr/share/games/doom3"

base_name = f"{exe_name.lower()}-launcher"
conf_dir = BaseDirectory.save_config_path(base_name)
data_dir = BaseDirectory.save_data_path(base_name)
mount_dir = os.path.join(data_dir, "data")


def fix_config(parser, path):
    with open(path, "r+") as f:
        contents = f.read()
        f.seek(0, 0)
        f.write(f"[{base_name}]\n" + contents)
    parser.read(path)
    for section in parser.sections():
        for key, val in parser.items(section):
            parser.set(section, key, val.replace('"', ""))


def main() -> int:
    app = QApplication(sys.argv)
    app.setAttribute(Qt.AA_DontUseNativeDialogs, True)
    app.setApplicationName(base_name)
    app.setOrganizationName(base_name)

    if not os.path.exists(mount_dir):
        os.mkdir(mount_dir)
    elif not os.path.isdir(mount_dir):
        QMessageBox.critical(None, f"{base_name}", f"Path <b>{mount_dir}</b> exists and it is not a directory.")
        app.exit()
        return 1

    mergerfs = QStandardPaths.findExecutable("mergerfs")
    if not mergerfs:
        QMessageBox.critical(None, f"{base_name}", f"<b>{os.path.basename(mergerfs)}</b> is not installed.")
        app.exit()
        return 1

    conf_path = os.path.join(conf_dir, "launcher.conf")
    config = configparser.ConfigParser()
    if os.path.exists(conf_path):
        try:
            config.read(conf_path)
        except Exception as e:
            sys.stderr.write(str(e))
            config.add_section(base_name)
            # fix_config(config, conf_path)
            # config.read(conf_path)
    else:
        config.add_section(base_name)

    install_dir = config.get(base_name, "install_dir", fallback=None)
    if not install_dir:
        ans = QMessageBox.question(
            None, f"{base_name}",
            f"install_dir is not set in the configuration file \n"
            f"{conf_path}\n"
            f"Without it, the default locations will be searched for game files.\n\n"
            f"Do you want to set it now?\n"
        )
        if ans == QMessageBox.StandardButton.Yes:
            install_dir = QFileDialog().getExistingDirectory(None, base_name)
            config.set(base_name, "install_dir", install_dir)

    with open(conf_path, 'w') as conf_file:
        config.write(conf_file)

    base_path = []
    proc = QProcess(app)
    proc.setProcessEnvironment(QProcessEnvironment.systemEnvironment())

    if install_dir:
        proc.setProgram(mergerfs)
        proc.setArguments(["-o", f"fsname={exe_name}", f"{doom_dir}:{install_dir}", mount_dir])
        proc.start()
        proc.waitForFinished(-1)
        if proc.exitStatus() == QProcess.ExitStatus.CrashExit or proc.exitCode() != 0:
            stderr = proc.readAllStandardError().data().decode('utf-8', 'ignore')
            sys.stderr.write(stderr)
            QMessageBox.critical(
                None, f"{base_name}",
                f"<b>{os.path.basename(mergerfs)}</b> failed to execute correctly:\n"
                f"{stderr}"
            )
            proc.deleteLater()
            app.exit()
            return 1
        base_path = ["+set", "fs_basepath", mount_dir]

    proc.setProgram(QStandardPaths.findExecutable(exe_name))
    # doom_roe = ("+set", "fs_game", "d3xp",)
    proc.setArguments(["+set", "in_tty", "0", *base_path, *sys.argv])
    proc.start()
    proc.waitForFinished(-1)
    if proc.exitStatus() == QProcess.ExitStatus.CrashExit or proc.exitCode() != 0:
        sys.stderr.write(proc.readAllStandardOutput().data().decode('utf-8', 'ignore'))

    if os.path.ismount(mount_dir):
        proc.setProgram(QStandardPaths.findExecutable("umount"))
        proc.setArguments([mount_dir])
        proc.start()
        proc.waitForFinished(-1)
        if proc.exitStatus() == QProcess.ExitStatus.CrashExit or proc.exitCode() != 0:
            sys.stderr.write(proc.readAllStandardError().data().decode('utf-8', 'ignore'))

    proc.deleteLater()
    app.exit()
    return 0


if __name__ == '__main__':
    sys.exit(main())
