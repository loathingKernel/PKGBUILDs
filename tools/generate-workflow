#!/usr/bin/python3

import argparse
import os
import subprocess
import sys
from pathlib import Path
import logging

format = "%(levelname)s: %(message)s"
logging.basicConfig(stream=sys.stderr, format=format, level=logging.DEBUG)
logger = logging.getLogger(os.path.basename(__file__))

script_name = os.path.basename(__file__)

workflows_folder = ".github/workflows/"
workflows_path = Path(workflows_folder)

workflow_base = """
name: {pkgname}

on:
  workflow_dispatch:
    inputs:
      action:
        description: "Repository action"
        required: true
        type: choice
        default: 'build'
        options:
          - 'build'
          - 'remove'
          - 'skip'
  push:
    branches:
      - master
    paths:
      - {subdir}/{pkgname}/.SRCINFO

jobs:
  repository:
    strategy:
      matrix:
        repository: {repotag}
    uses: ./.github/workflows/_job_pkgrepo.yml
    with:
      pkgdir: {subdir}/{pkgname}
      repository: ${{{{ matrix.repository }}}}
      action: ${{{{ inputs.action != '' && inputs.action || 'build' }}}}
"""


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        prog=script_name,
        description="Manage subtrees for PKGBUILD repositories",
    )
    parser.add_argument(
        "--repotag", action="store", choices={"public", "personal", "all"}, default="public", required=True
    )
    parser.add_argument("path")
    args = parser.parse_args()

    if not os.path.exists(os.path.join(os.getcwd(), ".git")):
        logger.error(
            "'%s' is not a git repository or not the root of one.", os.getcwd()
        )
        sys.exit(2)

    if not os.path.isdir(workflows_folder):
        logger.error(
            "'%s' is not a configured GitHub repository.", os.getcwd()
        )
        sys.exit(2)

    path = Path(args.path)
    if not path.is_dir():
        logger.error(f"'%s' is not a directory, exiting.", path)
        sys.exit(1)

    subdir = path.parent
    pkgname = path.stem

    workflow_file = workflows_path.joinpath(f"{pkgname}.yml")

    if args.repotag == "all":
        repotag = "[public, personal]"
    else:
        repotag = f"[{args.repotag}]"

    logger.info("adding workflow for %s to repositories %s", pkgname, repotag)
    with workflow_file.open("w") as wf:
        wf.write(workflow_base.format(
            subdir=subdir, pkgname=pkgname, repotag=repotag)
        )

    subprocess.run(['git', 'add', workflow_file.as_posix()])
    subprocess.run(['git', 'commit', '-m', f'workflows: add {pkgname}'])
    sys.exit(0)
